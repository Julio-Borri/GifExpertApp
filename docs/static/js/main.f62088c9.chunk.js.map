{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAkBzC,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAC5BR,GACE,SAACS,GAAD,OAAUT,EAAc,CAAEE,GAAH,mBAAkBO,UAO3C,2BACEC,KAAK,OACLC,MAAQT,EACRU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCIZG,EAVK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE5B,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAKA,K,uBCLEK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UAAUF,GAD3C,+DAGFG,MAAOR,GAHL,cAGfS,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAChB,SAAAC,GACE,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAXlB,kBAgBdY,GAhBc,4CAAH,sDC2BLM,EAvBM,SAACb,GAAc,IAAD,EAEPpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAJsB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAmBjC,OAZAC,qBACE,WACElB,EAAQC,GACPkB,MAAK,SAAAC,GACFH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGd,IAGEC,GCFMK,EAnBC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,EAEEa,EAAab,GAAhCW,EAFiB,EAEvBL,KAAcQ,EAFS,EAETA,QAErB,OACE,oCACE,wBAAIlB,UAAU,yCAAyCI,GAErDc,GAAW,mBAEb,yBAAKlB,UAAU,aACZe,EAAOH,KAAI,SAACa,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAIX,IAAQW,UCSzBE,EArBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,kBAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAIzB,OACE,oCACE,+CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEI6C,EAAWhB,KACT,SAACR,GAAD,OAAc,kBAAC,EAAD,CAASsB,IAAMtB,EAAWA,SAAWA,UCZ/DyB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f62088c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim().length > 2) {\r\n      setCategories(\r\n        (cats) => setCategories([ inputValue, ...cats ])\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\r\n  return(\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title}/>\r\n      <h4>{title}</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem;\r\n","\r\n\r\nexport const getGifs = async ( category ) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=oyBRQ7iP2nWy1NirGvNjDBVaVUTf6YHR`;\r\n\r\n  const resp = await fetch( url );\r\n  const {data} = await resp.json();\r\n\r\n  const gifs = data.map(\r\n    gif => {\r\n      return {\r\n        id: gif.id,\r\n        title: gif.title,\r\n        url: gif.images.downsized_medium.url,\r\n      }\r\n    }\r\n  )\r\n\r\n  return gifs;\r\n}\r\n","import { getGifs } from '../helpers/getGifs';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( \r\n    () => {\r\n      getGifs(category)\r\n      .then(imgs => {\r\n          setState({\r\n            data: imgs,\r\n            loading: false\r\n          })    \r\n      })\r\n    }, [] \r\n  );\r\n\r\n  return state;\r\n}\r\n\r\n\r\nexport default useFetchGifs;","import React from 'react';\r\nimport GifGridItem from './GifGridItem'\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\r\n\r\n      { loading && 'Cargando gifs...' }\r\n\r\n      <div className='card-grid'>\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifGrid;","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n  \r\n  const [categories, setCategories] = useState(['One punch man'])\r\n  \r\n  return (\r\n    <>\r\n      <h2>Giff Expert App</h2>\r\n      <AddCategory setCategories= { setCategories } />\r\n      <hr/>\r\n\r\n      <ol>\r\n        {\r\n          categories.map(\r\n            (category) => <GifGrid key={ category } category= {category} />\r\n          )\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}